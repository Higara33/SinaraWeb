@page "/Edituser"

@using BlazorWebAss.Models

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime Js

<h2>EditUser</h2>

<div class="row">
    <EditForm Model="@user" OnValidSubmit="@Validate">
        <DataAnnotationsValidator />
        <div class="col-md-6">
                <div class="form-group">
                        <label for="FirstName"> First Name *</label>
                        <input form="FirstName" class="form-control" @bind="@user.FirstName" />
                </div>
        </div>
        <div class="col-md-6">
                <div class="form-group">
                        <label for="LastName"> Last Name *</label>
                        <input form="LastName" class="form-control" @bind="@user.LastName" />
                </div>
        </div>
        <div class="col-md-6">
                <div class="form-group">
                    <label for="FatherName"> FatherName *</label>
                    <input form="FatherName" class="form-control" @bind="@user.FatherName" />
                </div>
        </div>
        <div class="col-md-6">
                <div class="form-group">
                    <label for="Login"> Login *</label>
                    <input form="Login" class="form-control" @bind="@user.Login" />
                    <ValidationMessage For="@(() => @user.Login)" />
                </div>
        </div>
        <div class="col-md-6">
                <div class="form-group">
                    <label for="NewLogin"> NewLogin *</label>
                    <input form="NewLogin" class="form-control" @bind="@user.NewLogin" />
                </div>
        </div>
        <input type="submit" class="btn btn-primary" value="Save" />
        <input type="button" class="btn" @onclick="@Cancel" value="Cancel" />
    </EditForm>
</div>

@code {
    EditUserFormModel user = new();
    Response response = new();

    private async Task Validate()
    {
        if (user.FatherName == string.Empty && user.LastName == string.Empty && user.FirstName == string.Empty && user.NewLogin == string.Empty)
            await Js.InvokeVoidAsync("alert", "No data to edit");
        else
            await Save();
    }

    protected async Task Save()
    {
        var responseMessage = await Http.PostAsJsonAsync<EditUserFormModel>("Api/Users/EditUser", @user);
        response = await responseMessage.Content.ReadFromJsonAsync<Response>();
        if (response.Errors != null)
        {
            await Js.InvokeVoidAsync("alert", response.Errors.FirstOrDefault().ErrorMessage);
        }
        else
            NavigationManager.NavigateTo("note");
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("note");
    }

}
